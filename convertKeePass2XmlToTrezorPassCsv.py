#!/usr/bin/env python

import sys
import os
import getopt
import xml.etree.ElementTree as ET
import csv

Version = "1.0"
VersionDate = "May 2017"
ifile = "keepass2.xml"
ofile = "trezorpass.csv"


def usage():
	print """convertKeePass2XmlToTrezorPassCsv.py [-v] [-h] [-i <keepass2.xml>] [-o <trezorpass.csv>]
		-v, --version
				print the version number
		-h, --help
				print help text
		-i, --input
				name of XML file generated from KeePass2 export
		-o, --output
				name of CSV file generated by this program which can then be imported into TrezorPass

		All arguments are optional.

		By default it expects the input file to be named "keepass2.xml".

		By default it creates the output file named "trezorpass.csv". If it
		already exists it will be overwritten.

		The purpose of this program is to migrate a KeePass2 database to TrezorPass.
		This is done in a 3-Step process.

		Step 1: Open KeePass2, using the `File | Export` function in the menu, export
		your .kdb file to an XML file of type `KeePass XML (2.x)`. Name the output file
		`keepass2.xml`. KeePass2 also allows partial exports, like only exporting
		your entries in the group `eMail`.

		Step 2: Run this program `convertKeePass2XmlToTrezorPassCsv`. It will convert
		the `keepass2.xml` file into a CSV file named `trezorpass.csv`. Be careful,
		if that file exists, it will be overwritten. Optionally, if desired, you
		can make manual changes to the `trezorpass.csv` file.

		Step 3: Open TrezorPass and use the `Import plaintext CSV file`
		function from the menu to import the `trezorpass.csv` file. All information
		from the `trezorpass.csv` file will be added to any existing information
		in the TrezorPass password database. Optionally, if desired, create an
		empty TrezorPass password database first.

		Examples:
		# normal operation, expects file `keepass2.xml` to exist
		convertKeePass2XmlToTrezorPassCsv.py

		# operation with non-standard filenames
		convertKeePass2XmlToTrezorPassCsv.py -i keepassEmail.xml -o trezorpassEmail.csv
		"""


def printVersion():
	"""
	Show about and version information.
	"""
	print("Version: %s from %s" % (Version, VersionDate))
	print("About convertKeePass2XmlToTrezorPassCsv: This program helps you \n"
		"to migrate your KeePass2 password database to TrezorPass.")


def parseArgs(argv):
	try:
		opts, args = getopt.getopt(argv, "vhi:o:",
			["version", "help", "input=", "output="])
	except getopt.GetoptError, e:
		print('Wrong arguments. Error: %s.', str(e))
		sys.exit(2)
	for opt, arg in opts:
		if opt in ("-h", "--help"):
			usage()
			sys.exit()
		elif opt in ("-v", "--version"):
			printVersion()
			sys.exit()
		elif opt in ("-i", "--input"):
			ifile = arg
		elif opt in ("-o", "--output"):
			ofile = arg

	if len(args) != 0:
		print("Incorrect arguments %s found in command line. "
			"Correct your input." % str(args))
		sys.exit(20)

	if not os.path.isfile(ifile):
		print("File \"%s\" does not exist, is not a proper file, "
			"or is a directory. Aborting." % ifile)
		sys.exit(21)
	if not os.access(ifile, os.R_OK):
		print("File \"%s\" cannot be read. No read permissions. "
			"Aborting." % ifile)
		sys.exit(22)
	if os.path.isfile(ofile):
		print("File \"%s\" already exist. It wil be overwritten." % ofile)
		if not os.access(ofile, os.W_OK):
			print("File \"%s\" cannot be written. No write permissions. "
				"Aborting." % ofile)
			sys.exit(22)


def calculateDepth(member, currDepth):
	max = currDepth
	for submember in member.findall('Group'):
		curr = calculateDepth(submember, currDepth+1)
		if curr > max:
			max = curr
	return max


def printCvs(ofile):
	with file(ofile, "r") as f:
		csv.register_dialect("escaped", doublequote=False, escapechar='\\')
		reader = csv.reader(f, dialect="escaped")
		for csvEntry in reader:
			try:
				print("CSV Entry: 0=%s, 1=%s, 2=%s, 3=%s" %
					(csvEntry[0], csvEntry[1], csvEntry[2], csvEntry[3]))
			except Exception as e:
				print("ERROR: length of row = %d, row entry 0 = %s, Error text = %s" %
					(len(csvEntry), csvEntry[0], e))


def escape(str):
	"""
	Keepass escapes " as "". Nothing else.
	We need to escape \ as \\.
	"""
	return str.replace('\\', '\\\\')


def writeEntriesToList(tree, member, currDepth, currGroupName, max, entry_list, csvwriter):
	# the root group in Keepass is the name of the .kdb file,
	# this might be more molesting than useful. So, let us skip it.
	skipRootName = True
	for submember in member.findall('Group'):
		mname = submember.find('Name').text.encode('utf-8')  # name of Group in XML
		if skipRootName:
			if currDepth <= 0:
				mname = ""
		if currGroupName != "":
			mname = "--" + mname
		writeEntriesToList(tree, submember, currDepth+1, currGroupName + mname, max, entry_list, csvwriter)
	for submember in member.findall('Entry'):
		dict = {}
		for strmember in submember.findall('String'):
			#  ET.dump(submember)
			entry = []
			mkey = strmember.find('Key').text.encode('utf-8')
			try:
				mval = strmember.find('Value').text.encode('utf-8')
			except Exception:
				print("Info: No value given for key '%s' (group: %s), moving on ..." % (mkey, currGroupName))
				mval = ''
			dict[mkey] = mval

		entry = []
		sep = ""
		if currGroupName != "":
			sep = "--"

		entry.append(escape(currGroupName + sep + dict['Title']))
		entry.append('UserName')
		if 'UserName' in dict:
			entry.append(escape(dict['UserName']))
		else:
			entry.append('')
		entry.append('')
		csvwriter.writerow(entry)
		entry_list.append(entry)

		entry = []
		entry.append(escape(currGroupName + sep + dict['Title']))
		entry.append('Password')
		if 'Password' in dict:
			entry.append(escape(dict['Password']))
		else:
			entry.append('')
		entry.append('')
		csvwriter.writerow(entry)
		entry_list.append(entry)

		entry = []
		entry.append(escape(currGroupName + sep + dict['Title']))
		entry.append('URL')
		if 'URL' in dict:
			entry.append(escape(dict['URL']))
		else:
			entry.append('')
		entry.append('')
		csvwriter.writerow(entry)
		entry_list.append(entry)

		entry = []
		entry.append(escape(currGroupName + sep + dict['Title']))
		entry.append('Notes')
		entry.append('')
		if 'Notes' in dict:
			entry.append(escape(dict['Notes']))
		else:
			entry.append('')
		csvwriter.writerow(entry)
		entry_list.append(entry)
		dict.clear()
		del dict


def main():
	print("Starting to parse input file \"%s\"." % (ifile))
	tree = ET.parse(ifile)
	root = tree.getroot()

	#  open a file for writing
	with open(ofile, 'w') as f:
		root = root.find('Root')
		max = calculateDepth(root, 0)
		print("There are %d levels in the hierarchy of the XML file." % max)
		csv.register_dialect("escaped", doublequote=False, escapechar='\\')
		# create the csv writer object
		csvwriter = csv.writer(f, dialect="escaped")
		entry_list = []
		#  entry = []
		#  entry.append('Groupname')
		#  entry.append('Key')
		#  entry.append('Value/Password')
		#  entry.append('Comments')
		#  csvwriter.writerow(entry)
		writeEntriesToList(tree, root, 0, "", max, entry_list, csvwriter)

	print("Produced output file \"%s\"." % ofile)
	print("Entries are in 4 columns as follows: Groupname, Key, Value/Password, Comments")
	#  printCvs(ofile)


if __name__ == "__main__":
	main()
